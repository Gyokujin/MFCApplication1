프로세스(Process) : main에서 작동하는 하나의 큰 흐름
스레드(Thread) : 프로세스내에서 진행되는 절차의 경로. 이때 이 쓰레드의 활용에 따라 프로그램의 흐름을 바꿀수 있다.(유니티의 코루틴처럼 원하는 방식의 흐름제어가 가능하다.)
테스크(Task) : 프로세스 내의 작업을 여러 작업자가 나눠서 수행한 뒤 다시 하나의 결과로 만드는 것. 계산 자원을 효율적으로 처리하기 위한 방법이다.
Join : 현재 쓰레드가 해당 쓰레드가 끝날때까지 대기한다. (잠시 임계하는 형태이다)
Detach : 현재 쓰레드와 해당 쓰레드가 분리되어 독립적인 흐름으로 진행되게 한다. (이때 분리된 쓰레드가 메인 쓰레드보다 늦게 종료되면 메모리누수의 위험이 생기게 된다)
스레드와 테스크의 차이 : 둘 다 병렬 처리와 비동기 작업을 수행하기 위한 방법으로 스레드의 생명주기를 직접 관리하고 세밀하게 제어할 때는 스레드를, 결과를 쉽게 처리하고 간략한 구성에는 테스크를 사용한다.

잡스케쥴러 : 클라우드 내에서 여러 개의 작업(Job)이 요청되었을 때 한정된 자원을 효율적으로 배분하여 사용자의 원활히 수행될 수 있도록 도와주는 역할을 한다.
뮤텍스 : 서로 다른 두 프로세스, 스레드가 같이 접근되지 않는 공유 영역을 의미한다. 두 가지의 처리가 동시에 이루어지는 것을 막으며 하나의 스레드가 이용 중일 때는 다른 스레드의 접근을 제한한다.
경쟁상태 : 씹힘 현상을 막기 위해 접근을 의도적으로 막는다.
async : 비동기 프로그래밍에서 특정 작업을 백그라운드에서 수행하여 메인 스레드나 이벤트 루프가 다른 작업을 계속 진행할 수 있도록 하는 기능을 의미합니다. (detach는 새로운 스레드 생성과 독립적인 실행을 하여 결과를 기다리지 않는 반면 async는 결과를 기다리는 기능을 제공한다)
CPU에서 스레드 처리 방식 : 멀티스레딩을 통해 병렬 처리와 동시성을 제공하며 스레드의 스케줄링과 컨텍스트 스위칭을 통해 CPU 자원을 효율적으로 활용하여, 응답성을 높이고 성능을 향상시킬 수 있다.
듀얼코어에서 게임 처리 방식 : 2개의 CPU로 프로세스를 관리하며 멀티 스레드를 보다 원활하게 할 수 있다. 게임에서의 멀티 스레딩 개념은 최적화(렌더링, 물리 연산)와 설계 패턴(AI 처리, 오디오 처리)에 중점을 둔다.
멀티 코어에서 게임 처리 방식 : 3개 이상의 CPU로 프로세스를 관리하는 것. 듀얼코어에서 더욱 성능을 향상시켰다.
오버헤드 : 프로세스를 진행하는 과정에서 추가적으로 소비되는 자원이나 시간을 의미한다. 하나의 관리해야 할 스레드가 많아질수록 이 위험이 커진다.
컨텍스트 스위칭 : 멀티 스레드 방식에서 스레드를 전환할 때 추가로 발생하는 비용을 의미한다. 때문에 멀티 코어를 사용하여 각각의 코어가 스레드를 따로 관리하여 이 컨텍스트 스위칭을 발생을 최대한 줄이도록 한다.

비동기화 프로그래밍 : 같은 흐름 내에서 처리하지 않고 작동하는 로직
